# -*- coding: utf-8 -*-
"""DecisionTreeClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qifl0le306XdHDVrGQzX7WEE1mYF6Nja
"""

import pandas as pd

# Construct the dataset
data = {
    'Student Type': ['Btech', 'Mtech', 'Mtech', 'MCA', 'Btech', 'MCA', 'Btech', 'Mtech'],
    'CGPA': [9, 8, 7, 9, 7, 8, 8, 9],
    'Placement Registration': ['Yes', 'No', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'No'],
    'Aptitude Level': ['High', 'Medium', 'Low', 'High', 'Medium', 'High', 'Low', 'Medium'],
    'Communication Skill': ['VG', 'G', 'N', 'VG', 'G', 'N', 'VG', 'G'],
    'Placement': ['SD', 'D', 'O', 'SD', 'D', 'O', 'SD', 'D']  # TARGET VARIABLE
}

df = pd.DataFrame(data)
print(df)

from sklearn.preprocessing import LabelEncoder

# Initialize label encoders
le_student_type = LabelEncoder()
le_registration = LabelEncoder()
le_aptitude = LabelEncoder()
le_communication = LabelEncoder()
le_placement = LabelEncoder()

# Encode categorical columns
df['Student Type'] = le_student_type.fit_transform(df['Student Type'])
df['Placement Registration'] = le_registration.fit_transform(df['Placement Registration'])
df['Aptitude Level'] = le_aptitude.fit_transform(df['Aptitude Level'])
df['Communication Skill'] = le_communication.fit_transform(df['Communication Skill'])
df['Placement'] = le_placement.fit_transform(df['Placement'])

print(df)

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
import matplotlib.pyplot as plt

# Split the data into features and target variable
X = df.drop('Placement', axis=1)
y = df['Placement']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize and train the decision tree classifier
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

# Predict the test set results
y_pred = clf.predict(X_test)

# Print accuracy
from sklearn.metrics import accuracy_score
print(f"Accuracy: {accuracy_score(y_test, y_pred)}")

# Visualize the decision tree
plt.figure(figsize=(20,10))
tree.plot_tree(clf, feature_names=X.columns, class_names=le_placement.classes_, filled=True)
plt.show()

